<project name="TLSv1.0 Warning messages" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>
    <property name="sf.maxPoll" value="20"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="ant-salesforce.jar" />        	
        </classpath>
    </taskdef>

    <target name="init_source">
        <input message="Please enter login url:" addproperty="source.sf.serverurl" />
        <input message="Please enter source username:" addproperty="source.sf.username" />
        <input message="Please enter source password:" addproperty="source.sf.password" />
        <condition property="source.sf.sessionId" value=""> <not> <isset property="source.sf.sessionId"/> </not> </condition>
    </target>
	
	
    <target name="init_source_refresh">
        <input message="Please enter login url:" addproperty="source.sf.serverurl" />
        <input message="Please enter source username:" addproperty="source.sf.username" />
        <input message="Please enter source password:" addproperty="source.sf.password" />
        <input message="Please enter branch:" addproperty="source.git.refresh.branch" />
        <condition property="source.sf.sessionId" value=""> <not> <isset property="source.sf.sessionId"/> </not> </condition>
    </target>

    <target name="init_target">
        <input message="Please enter target url:" addproperty="target.sf.serverurl" />
        <input message="Please enter target username:" addproperty="target.sf.username" />
        <input message="Please enter target password:" addproperty="target.sf.password" />
        <condition property="target.sf.sessionId" value=""> <not> <isset property="target.sf.sessionId"/> </not> </condition>
    </target>

    <target name="retrieve" depends="init_source">
        <mkdir dir="src"/>
        <sf:retrieve username="${source.sf.username}" password="${source.sf.password}" serverurl="${source.sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="src/package.xml"/>
    </target>

    <target name="deploy" depends="init_target">
      <sf:deploy username="${target.sf.username}" password="${target.sf.password}" sessionId="${target.sf.sessionId}" serverurl="${target.sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true"/>
    </target>

    <target name="clean" depends="init_target">
      <sf:deploy username="${target.sf.username}" password="${target.sf.password}" sessionId="${target.sf.sessionId}" serverurl="${target.sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="clean" rollbackOnError="false" logType="Detail"/>
    </target>

    <target name="listMetadata" depends="init_source">
      <sf:listMetadata username="${source.sf.username}" password="${source.sf.password}" serverurl="${source.sf.serverurl}" metadataType="ApexClass"/>
    </target>
	
	<target name="bulkRetrieve">
      <sf:bulkRetrieve username="${source.sf.username}" password="${source.sf.password}" serverurl="${source.sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${varMetadataType}" retrieveTarget="src"/>
    </target>
	
	<target name="git-status">
        <git command="status" options=""/>
    </target>
		
	<target name="git-checkout-master">
        <git command="checkout" options="master"/>
    </target>
	
	<target name="git-delete-refresh-branch">
        <git command="branch -d" options="${source.git.refresh.branch}"/>
    </target>
	
	<target name="git-create-refresh-branch" depends="git-checkout-master, git-delete-refresh-branch">
        <git command="checkout -b" options="${source.git.refresh.branch}"/>
    </target>
	
	<target name="bulkRetrieveIterate">
        <loadfile property="list" srcfile="metadataType.properties"/>
		<for param="metadatatype" list="${list}" delimiter="${line.separator}">
			<sequential>
				<echo message="@{metadatatype}"/>
				<antcall target="bulkRetrieve">
					<param name="varMetadataType" value="@{metadatatype}"/>
				</antcall>
			</sequential>
		</for>
    </target>
	
	<target name="git-remove-package">
		<git command="rm" options="rm -f src/package.xml"/>
	</target>
	
	<target name="git-stage-commit" depends="git-remove-package">
        <git command="add" options="-A ."/>
    </target>
		
	<target name="git-commit" depends="git-remove-package, git-stage-commit">
        <git command="commit" options='-m "Commit Refresh branch ${source.git.refresh.branch}"'/>
    </target>
	
	<target name="git-merge-to-master" depends="init_source_refresh, git-create-refresh-branch, bulkRetrieveIterate, git-commit" >
		<antcall target="git-checkout-master"/>
        <git command="merge" options="${source.git.refresh.branch} master"/>
    </target>
		
	<target name="git-push-to-master-remote" depends="git-merge-to-master">
        <git command="push" options="origin master"/>
    </target>
	
	
	<macrodef name="git">
        <attribute name="command" />
        <attribute name="options" default="" />
        <attribute name="dir" default="" />
        <attribute name="failerror" default="false" />
        <element name="args" optional="true" />
        <sequential>
            <echo message="git dir @{dir}" />
            <echo message="git @{command}" />
            <exec executable="git" dir="@{dir}" failonerror="@{failerror}">
                <arg line="@{command} @{options}" />
                <args />
            </exec>
        </sequential>
    </macrodef>

</project>